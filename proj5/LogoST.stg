group LogoST;

Output(instructions,maxStackDepth,maxLocals)::=<<
.class public LogoJVM1
.super java/lang/Object

.method public ()V
   aload_0
   invokenonvirtual java/lang/Object/()V
   return
.end method

.method public static main([Ljava/lang/String;)V
   .limit stack <maxStackDepth> ; how much stack space do we need?
   .limit locals <maxLocals> ; how many locals do we need?   

   ; INIT turtle members
   ;  - Turtle Instance a_1
   ;  - Frame Instance a_2 
   new msu/cse/turtlegraphics/Turtle
   dup
   invokespecial msu/cse/turtlegraphics/Turtle/\<init\>()V
   astore_1
   new msu/cse/turtlegraphics/TurtleDisplayFrame
   dup
   invokespecial msu/cse/turtlegraphics/TurtleDisplayFrame/\<init\>()V
   astore_2
   aload_2
   iconst_1
   invokevirtual msu/cse/turtlegraphics/TurtleDisplayFrame/setVisible(Z)V
   aload_1
   aload_2
   invokevirtual msu/cse/turtlegraphics/TurtleDisplayFrame/getCurrentCanvas()Lmsu/cse/turtlegraphics/TurtleDisplayCanvas;
   invokevirtual msu/cse/turtlegraphics/Turtle/setCurrentTurtleDisplayCanvas(Lmsu/cse/turtlegraphics/TurtleDisplayCanvas;)V
   
   ;To end program when window is closed
   aload_2
   getstatic 
   invokevirtual msu/cse/turtlegraphics/TurtleDisplayFrame/setDefaultCloseOperation(I)V
   
   ; END turtle members
   
   <instructions; separator="\n">

   return
.end method
>>

assign(expression, varNum) ::= <<
<expression; separator="\n">
istore <varNum>
>>

dassign(expression, varNum)::=<<
<expression; separator="\n">
dstore <varNum>
>>

var(varNum) ::= <<
iload <varNum>
>>

dvar(varNum)::=<<
dload <varNum>
>>

add(a, b) ::= <<
<a>
<b>
iadd
>>

sub(a, b) ::= <<
<a>
<b>
isub
>>

mul(a, b) ::= <<
<a>
<b>
imul
>>

div(a, b) ::= <<
<a>
<b>
idiv
>>

int(i) ::= <<
ldc <i>
>>

dbl(d)::=<<
ldc2_w	<d>d
>>

paren(exprs)::=<<
<exprs:{e|<e>}; separator="\n" >
>>

penup()::=<<
aload_1
invokevirtual msu/cse/turtlegraphics/Turtle/turtlePenUp()V
>>

pendown()::=<<
aload_1
invokevirtual msu/cse/turtlegraphics/Turtle/turtlePenDown()V
>>

fwd(dist)::=<<
aload_1
<dist; separator="\n">
invokevirtual msu/cse/turtlegraphics/Turtle/turtleForward(I)V
>>

back(dist)::=<<
aload_1
<dist; separator="\n">
invokevirtual msu/cse/turtlegraphics/Turtle/turtleBackward(I)V
>>

left(dist)::=<<
aload_1
<dist; separator="\n">
invokevirtual msu/cse/turtlegraphics/Turtle/turtleLeft(I)V
>>

right(dist)::=<<
aload_1
<dist; separator="\n">
invokevirtual msu/cse/turtlegraphics/Turtle/turtleRight(I)V
>>

seth(dist)::=<<
aload_1
<dist; separator="\n">
i2d ;set heading only accepts doubles as input
invokevirtual msu/cse/turtlegraphics/Turtle/turtleSetHeading(D)V
>>

setp(x,y)::=<<
aload_1
new java/awt/Point
dup
<x; separator="\n">
<y; separator="\n">
invokespecial java/awt/Point/\<init\>(II)V
invokevirtual msu/cse/turtlegraphics/Turtle/turtleGoto(Ljava/awt/Point;)V
>>

circ(r,angle)::=<<
aload_1
<r; separator="\n">
<angle; separator="\n">
invokevirtual msu/cse/turtlegraphics/Turtle/turtleCircle(II)V
>>

spc(r,g,b)::=<<
aload_1
<r; separator="\n">
<g; separator="\n">
<b; separator="\n">
invokevirtual msu/cse/turtlegraphics/Turtle/turtleSetColor(III)V
>>

begf()::=<<
aload_1
invokevirtual msu/cse/turtlegraphics/Turtle/turtleBeginFillPolygon()V
>>

endf()::=<<
aload_1
invokevirtual msu/cse/turtlegraphics/Turtle/turtleEndFillPolygon()V
>>