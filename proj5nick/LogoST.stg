// START:file
group ByteCode;

jasminFile(maxStackDepth, maxLocals, instructions) ::= <<
; public class Calc extends Object { ...}
.class public Calc
.super java/lang/Object

; public Calc() { super(); } // calls java.lang.Object()
.method public ()V
   aload_0
   invokenonvirtual java/lang/Object/()V
   return
.end method

; main(): Expr.g will generate bytecode in this method
.method public static main([Ljava/lang/String;)V
   .limit stack <maxStackDepth> ; how much stack space do we need?
   .limit locals <maxLocals> ; how many locals do we need?
   getstatic java/lang/System/out Ljava/io/PrintStream;
   ; code translated from input stream
   <instructions; separator="\n">
   return
.end method
>>
// END:file

// START:print
print(id, varNum) ::= <<
iload <varNum> ; <id>
invokevirtual java/io/PrintStream/println(I)V
>>
// END:print

// START:stat
assign(varNum,v,descr,id) ::= <<
; compute <descr>
<v>
istore <varNum> ; <id>
>>

exprStat(v, descr) ::= <<
; compute <descr>
<v>
>>
// END:stat

// START:expr
add(a,b) ::= <<
<a>
<b>
iadd
>>

sub(a,b) ::= <<
<a>
<b>
isub
>>

mult(a,b) ::= <<
<a>
<b>
imul
>>

int(v) ::= "ldc <v>"

var(id, varNum) ::= "iload <varNum> ; <id>"
// END:expr
